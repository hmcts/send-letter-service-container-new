plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.14.RELEASE'
  id 'org.springframework.boot' version '2.7.3'
  id 'org.owasp.dependencycheck' version '7.2.1'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.sonarqube' version '3.4.0.2513'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.0'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.49.0"
  ignoreFailures = true
  incrementalAnalysis = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/sendletter/config/**',
        'uk/gov/hmcts/reform/sendletter/model/**',
        'uk/gov/hmcts/reform/sendletter/Application.*'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

def sonarExclusions = [
  '**/Application.java'
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: rpe-send-letter-service-container-new"
    property "sonar.projectKey", "uk.gov.hmcts.reform:rpe-send-letter-service-container-new"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions", "**/model/in/*,**/config/**"
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.0.1-jre') {
      entry 'guava'
    }
    //CVE-2022-24823
    dependencySet(group: 'io.netty', version: '4.1.82.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-codec-dns'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-codec-socks'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-handler-proxy'
      entry 'netty-resolver'
      entry 'netty-resolver-dns'
      entry 'netty-resolver-dns-classes-macos'
      entry 'netty-resolver-dns-native-macos'
      entry 'netty-transport'
      entry 'netty-transport-classes-epoll'
      entry 'netty-transport-classes-kqueue'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-kqueue'
      entry 'netty-transport-native-unix-common'
    }

    dependencySet(group: 'io.netty.incubator', version: '0.0.20.Final') {
      entry 'netty-incubator-codec-quic'
    }

    // CVE-2021-22044
    dependencySet(group: 'org.springframework.cloud', version: '3.1.4') {
      entry 'spring-cloud-starter-openfeign'
    }
    // CVE-2014-3488 CVE-2015-2156
    dependencySet(group: 'io.netty', version: '2.0.43.Final') {
      entry 'netty-tcnative-boringssl-static'
    }
    dependencySet(group: 'org.apache.logging.log4j', version: '2.19.0') {
      entry 'log4j-api'
      entry 'log4j-to-slf4j'
    }
    //CVE-2022-22970, CVE-2022-22971
    dependencySet(group: 'org.springframework', version: '5.3.23') {
      entry 'spring-aop'
      entry 'spring-beans'
      entry 'spring-context'
      entry 'spring-core'
      entry 'spring-expression'
      entry 'spring-jcl'
      entry 'spring-test'
    }
    // CVE-2022-25857
    dependencySet(group: 'org.yaml', version: '1.32') {
      entry 'snakeyaml'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  junit           : '5.9.1',
  junitPlatform   : '1.9.1',
  springfoxSwagger: '2.9.2',
  mockitoJupiter  : '3.3.3',
  reformLogging   : '5.1.7'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.8'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.4'
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.19.1'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.26'

  implementation group: 'com.github.hmcts.rpe-pdf-service', name: 'pdf-generator', version:'1.0.2'

  implementation group: 'org.apiguardian', name: 'apiguardian-api', version:'1.1.2'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.apache.pdfbox', name: 'preflight', version: '2.0.26'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.sendletter.Application'

bootJar {
  getArchiveFileName().set(provider {
    'rpe-send-letter-service-container-new.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
